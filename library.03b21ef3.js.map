{"mappings":"oeAAAA,EAAA,S,4BAIAC,SAASC,iBAAiB,oBAAoBC,iBAC5C,MAEMC,EAAyB,UACzBC,EAAuB,QAE7BF,eAAeG,EAAgBC,GAC7B,IAME,aALuBC,EAAAC,QAAMC,IAAI,sCAAoBH,IAAW,CAC9DI,OAAQ,CACNC,QATO,uCAYKC,KAAKC,K,CACrB,MAAOC,GAEP,OADAC,QAAQD,MAAM,gCAAiCA,GACxC,I,EAIX,SAASE,EAAyBV,EAASW,EAAiBC,GAE1D,MAEMC,GADJC,KAAKC,MAAMC,aAAaC,QAAQN,KAAqB,IACpBO,QAAOC,GAAMA,IAAOnB,IACvDgB,aAAaI,QAAQT,EAAiBG,KAAKO,UAAUR,KAGjC,yBAAhBD,GAEuB,uBAAhBA,IADTU,EAAkBT,EAAeD,E,CAMrChB,eAAe0B,EAAkBC,EAAUX,GACzC,MAAMY,EAAqB9B,SAAS+B,eAAeb,GAEnD,IAAKY,EAEH,YADAf,QAAQD,MAAM,qBAAqBI,gBAKrC,MAAMc,EAAeF,EAAmBG,cAAc,MAClDD,GACFA,EAAaE,SAIf,MAAMC,EACJL,EAAmBG,cAAc,OAAOG,aAAe,GAEzD,GAAwB,IAApBP,EAASQ,QAEX,GAA8C,OAA1CP,EAAmBG,cAAc,KAAe,CAClD,MAAMK,EAAoBtC,SAASuC,cAAc,KACjDD,EAAkBF,YAAc,MAAMD,GAAgB,kBACtDL,EAAmBU,YAAYF,E,MAE5B,CACL,MAAMG,EAAKzC,SAASuC,cAAc,MAElC,IAAK,IAAIG,EAAQ,EAAGA,EAAQb,EAASQ,OAAQK,IAAS,CACpD,MAAMC,EAAUd,EAASa,GACnBE,QAAkBvC,EAAgBwC,OAAOF,IAC/C,GAAIC,EAAW,CACb,MAAME,EAAK9C,SAASuC,cAAc,MAC5BQ,EAAO/C,SAASuC,cAAc,QACpCQ,EAAKX,YAAcQ,EACnBE,EAAGN,YAAYO,GAGf,MAAMC,EAAehD,SAASuC,cAAc,UAC5CS,EAAaC,UAAY,WACzBD,EAAaE,UAAUC,IAAI,iBAE3BH,EAAa/C,iBAAiB,WAAWmD,IACvCA,EAAMC,kBAKNrC,EAJsBoC,EAAME,OAEzBC,QAAQ,MACRC,aAAa,YAGE,yBAAhBtC,EACIf,EACAC,EACJc,EACD,IAGH4B,EAAGN,YAAYQ,GAEfF,EAAGW,aAAa,WAAYd,GAC5BF,EAAGD,YAAYM,E,EAInBhB,EAAmBU,YAAYC,E,EAKnC,MAAMiB,EAAgB1D,SAASiC,cAAc,kBACvC0B,EAAc3D,SAASiC,cAAc,gBACrC2B,EAAmB5D,SAAS+B,eAAe,wBAC3C8B,EAAiB7D,SAAS+B,eAAe,sBAE3C2B,GAAiBC,GAAeC,GAAoBC,IAEtDH,EAAcR,UAAUC,IAAI,UAC5BS,EAAiBE,MAAMC,QAAU,QACjCF,EAAeC,MAAMC,QAAU,OAG/BL,EAAczD,iBAAiB,SAAS,KACtCyD,EAAcR,UAAUC,IAAI,UAC5BQ,EAAYT,UAAUhB,OAAO,UAC7B0B,EAAiBE,MAAMC,QAAU,QACjCF,EAAeC,MAAMC,QAAU,OAC/BnC,EACER,KAAKC,MAAMC,aAAaC,QAAQpB,KAA4B,GAC5D,uBACD,IAGHwD,EAAY1D,iBAAiB,SAAS,KACpC0D,EAAYT,UAAUC,IAAI,UAC1BO,EAAcR,UAAUhB,OAAO,UAC/B2B,EAAeC,MAAMC,QAAU,QAC/BH,EAAiBE,MAAMC,QAAU,OACjCnC,EACER,KAAKC,MAAMC,aAAaC,QAAQnB,KAA0B,GAC1D,qBACD,KAKDsD,GACFA,EAAcM,O","sources":["src/library.js"],"sourcesContent":["import './js/team-load-to-modal';\nimport './js/changer-theme';\nimport axios from 'axios';\n\ndocument.addEventListener('DOMContentLoaded', async function () {\n  const apiKey = 'd1ba1e64f9d6a08c9b908b32af105306';\n  const baseURL = 'https://api.themoviedb.org/3';\n  const localStorageKeyWatched = 'watched';\n  const localStorageKeyQueue = 'queue';\n\n  async function getMovieDetails(movieId) {\n    try {\n      const response = await axios.get(`${baseURL}/movie/${movieId}`, {\n        params: {\n          api_key: apiKey,\n        },\n      });\n      return response.data.title;\n    } catch (error) {\n      console.error('Error fetching movie details:', error);\n      return null;\n    }\n  }\n\n  function removeMovieAndUpdateList(movieId, localStorageKey, containerId) {\n    // Remove the movie from local storage\n    const storedMovies =\n      JSON.parse(localStorage.getItem(localStorageKey)) || [];\n    const updatedMovies = storedMovies.filter(id => id !== movieId);\n    localStorage.setItem(localStorageKey, JSON.stringify(updatedMovies));\n\n    // Update the movie list on the page based on the active tab\n    if (containerId === 'watchedListContainer') {\n      generateMovieList(updatedMovies, containerId);\n    } else if (containerId === 'queueListContainer') {\n      generateMovieList(updatedMovies, containerId);\n    }\n  }\n\n  async function generateMovieList(movieIds, containerId) {\n    const movieListContainer = document.getElementById(containerId);\n\n    if (!movieListContainer) {\n      console.error(`Container with id ${containerId} not found.`);\n      return;\n    }\n\n    // Clear existing list\n    const existingList = movieListContainer.querySelector('ol');\n    if (existingList) {\n      existingList.remove();\n    }\n\n    // Use the title from the HTML\n    const sectionTitle =\n      movieListContainer.querySelector('h2')?.textContent || '';\n\n    if (movieIds.length === 0) {\n      // Only add the \"No movies found\" message if the list is not empty\n      if (movieListContainer.querySelector('p') === null) {\n        const noMoviesParagraph = document.createElement('p');\n        noMoviesParagraph.textContent = `No ${sectionTitle || 'movies'} found.`;\n        movieListContainer.appendChild(noMoviesParagraph);\n      }\n    } else {\n      const ol = document.createElement('ol');\n\n      for (let index = 0; index < movieIds.length; index++) {\n        const movieId = movieIds[index];\n        const movieName = await getMovieDetails(Number(movieId));\n        if (movieName) {\n          const li = document.createElement('li');\n          const span = document.createElement('span');\n          span.textContent = movieName;\n          li.appendChild(span);\n\n          // Add \"x\" button for movie removal\n          const removeButton = document.createElement('button');\n          removeButton.innerHTML = '&#10006;'; // Unicode for \"âœ–\"\n          removeButton.classList.add('remove-button');\n\n          removeButton.addEventListener('mouseup', event => {\n            event.stopPropagation(); // Prevents the button click from propagating to document.body\n            const clickedButton = event.target;\n            const movieId = clickedButton\n              .closest('li')\n              .getAttribute('movie-id');\n            removeMovieAndUpdateList(\n              movieId,\n              containerId === 'watchedListContainer'\n                ? localStorageKeyWatched\n                : localStorageKeyQueue,\n              containerId\n            );\n          });\n\n          li.appendChild(removeButton);\n\n          li.setAttribute('movie-id', movieId);\n          ol.appendChild(li);\n        }\n      }\n\n      movieListContainer.appendChild(ol);\n    }\n  }\n\n  // Event listener for the \"Watched\" and \"Queue\" buttons\n  const watchedButton = document.querySelector('[data-watched]');\n  const queueButton = document.querySelector('[data-queue]');\n  const watchedContainer = document.getElementById('watchedListContainer');\n  const queueContainer = document.getElementById('queueListContainer');\n\n  if (watchedButton && queueButton && watchedContainer && queueContainer) {\n    // Set initial state (start with Watched container visible)\n    watchedButton.classList.add('active');\n    watchedContainer.style.display = 'block';\n    queueContainer.style.display = 'none';\n\n    // Add event listeners\n    watchedButton.addEventListener('click', () => {\n      watchedButton.classList.add('active');\n      queueButton.classList.remove('active');\n      watchedContainer.style.display = 'block';\n      queueContainer.style.display = 'none';\n      generateMovieList(\n        JSON.parse(localStorage.getItem(localStorageKeyWatched)) || [],\n        'watchedListContainer'\n      );\n    });\n\n    queueButton.addEventListener('click', () => {\n      queueButton.classList.add('active');\n      watchedButton.classList.remove('active');\n      queueContainer.style.display = 'block';\n      watchedContainer.style.display = 'none';\n      generateMovieList(\n        JSON.parse(localStorage.getItem(localStorageKeyQueue)) || [],\n        'queueListContainer'\n      );\n    });\n  }\n\n  // Set the default view to start with \"Watched\" movies\n  if (watchedButton) {\n    watchedButton.click();\n  }\n});\n"],"names":["parcelRequire","document","addEventListener","async","localStorageKeyWatched","localStorageKeyQueue","getMovieDetails","movieId","$2shzp","default","get","params","api_key","data","title","error","console","removeMovieAndUpdateList","localStorageKey","containerId","updatedMovies","JSON","parse","localStorage","getItem","filter","id","setItem","stringify","generateMovieList","movieIds","movieListContainer","getElementById","existingList","querySelector","remove","sectionTitle","textContent","length","noMoviesParagraph","createElement","appendChild","ol","index","movieId1","movieName","Number","li","span","removeButton","innerHTML","classList","add","event","stopPropagation","target","closest","getAttribute","setAttribute","watchedButton","queueButton","watchedContainer","queueContainer","style","display","click"],"version":3,"file":"library.03b21ef3.js.map"}