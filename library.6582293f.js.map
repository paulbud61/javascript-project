{"mappings":"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","sources":["src/library.js"],"sourcesContent":["import './js/team-load-to-modal';\nimport './js/changer-theme';\nimport axios from 'axios';\n\ndocument.addEventListener('DOMContentLoaded', async function () {\n  const apiKey = 'd1ba1e64f9d6a08c9b908b32af105306';\n  const baseURL = 'https://api.themoviedb.org/3';\n  const localStorageKeyWatched = 'watched';\n  const localStorageKeyQueue = 'queue';\n\n  async function getMovieDetails(movieId) {\n    try {\n      const response = await axios.get(`${baseURL}/movie/${movieId}`, {\n        params: {\n          api_key: apiKey,\n        },\n      });\n      return response.data.title;\n    } catch (error) {\n      console.error('Error fetching movie details:', error);\n      return null;\n    }\n  }\n\n  function removeMovieAndUpdateList(movieId, localStorageKey, containerId) {\n    // Remove the movie from local storage\n    const storedMovies =\n      JSON.parse(localStorage.getItem(localStorageKey)) || [];\n    const updatedMovies = storedMovies.filter(id => id !== movieId);\n    localStorage.setItem(localStorageKey, JSON.stringify(updatedMovies));\n\n    // Update the movie list on the page based on the active tab\n    if (containerId === 'watchedListContainer') {\n      generateMovieList(updatedMovies, containerId);\n    } else if (containerId === 'queueListContainer') {\n      generateMovieList(updatedMovies, containerId);\n    }\n  }\n\n  async function generateMovieList(movieIds, containerId) {\n    const movieListContainer = document.getElementById(containerId);\n\n    if (!movieListContainer) {\n      console.error(`Container with id ${containerId} not found.`);\n      return;\n    }\n\n    // Clear existing list\n    const existingList = movieListContainer.querySelector('ol');\n    if (existingList) {\n      existingList.remove();\n    }\n\n    // Use the title from the HTML\n    const sectionTitle =\n      movieListContainer.querySelector('h2')?.textContent || '';\n\n    if (movieIds.length === 0) {\n      // Only add the \"No movies found\" message if the list is not empty\n      if (movieListContainer.querySelector('p') === null) {\n        const noMoviesParagraph = document.createElement('p');\n        noMoviesParagraph.textContent = `No ${sectionTitle || 'movies'} found.`;\n        movieListContainer.appendChild(noMoviesParagraph);\n      }\n    } else {\n      const ol = document.createElement('ol');\n\n      for (let index = 0; index < movieIds.length; index++) {\n        const movieId = movieIds[index];\n        const movieName = await getMovieDetails(Number(movieId));\n        if (movieName) {\n          const li = document.createElement('li');\n          const span = document.createElement('span');\n          span.textContent = movieName;\n          li.appendChild(span);\n\n          // Add \"x\" button for movie removal\n          const removeButton = document.createElement('button');\n          removeButton.innerHTML = '&#10006;'; // Unicode for \"âœ–\"\n          removeButton.classList.add('remove-button');\n\n          removeButton.addEventListener('mouseup', event => {\n            event.stopPropagation(); // Prevents the button click from propagating to document.body\n            const clickedButton = event.target;\n            const movieId = clickedButton\n              .closest('li')\n              .getAttribute('movie-id');\n            removeMovieAndUpdateList(\n              movieId,\n              containerId === 'watchedListContainer'\n                ? localStorageKeyWatched\n                : localStorageKeyQueue,\n              containerId\n            );\n          });\n\n          li.appendChild(removeButton);\n\n          li.setAttribute('movie-id', movieId);\n          ol.appendChild(li);\n        }\n      }\n\n      movieListContainer.appendChild(ol);\n    }\n  }\n\n  // Event listener for the \"Watched\" and \"Queue\" buttons\n  const watchedButton = document.querySelector('[data-watched]');\n  const queueButton = document.querySelector('[data-queue]');\n  const watchedContainer = document.getElementById('watchedListContainer');\n  const queueContainer = document.getElementById('queueListContainer');\n\n  if (watchedButton && queueButton && watchedContainer && queueContainer) {\n    // Set initial state (start with Watched container visible)\n    watchedButton.classList.add('active');\n    watchedContainer.style.display = 'block';\n    queueContainer.style.display = 'none';\n\n    // Add event listeners\n    watchedButton.addEventListener('click', () => {\n      watchedButton.classList.add('active');\n      queueButton.classList.remove('active');\n      watchedContainer.style.display = 'block';\n      queueContainer.style.display = 'none';\n      generateMovieList(\n        JSON.parse(localStorage.getItem(localStorageKeyWatched)) || [],\n        'watchedListContainer'\n      );\n    });\n\n    queueButton.addEventListener('click', () => {\n      queueButton.classList.add('active');\n      watchedButton.classList.remove('active');\n      queueContainer.style.display = 'block';\n      watchedContainer.style.display = 'none';\n      generateMovieList(\n        JSON.parse(localStorage.getItem(localStorageKeyQueue)) || [],\n        'queueListContainer'\n      );\n    });\n  }\n\n  // Set the default view to start with \"Watched\" movies\n  if (watchedButton) {\n    watchedButton.click();\n  }\n});\n"],"names":["$bpxeT","parcelRequire","document","addEventListener","$parcel$interopDefault","$2TvXO","mark","_callee1","apiKey","baseURL","localStorageKeyWatched","localStorageKeyQueue","getMovieDetails","_getMovieDetails","removeMovieAndUpdateList","generateMovieList","_generateMovieList","watchedButton","queueButton","watchedContainer","queueContainer","movieId","apply","this","arguments","_callee","response","$dIxxU","default","get","concat","params","api_key","_ctx","sent","data","title","console","error","t0","localStorageKey","containerId","updatedMovies","JSON","parse","localStorage","getItem","filter","id","setItem","stringify","movieIds","ref","movieListContainer","existingList","sectionTitle","noMoviesParagraph","ol","index","movieId1","movieName","li","span","removeButton","getElementById","querySelector","remove","textContent","length","createElement","appendChild","Number","innerHTML","classList","add","event","stopPropagation","target","closest","getAttribute","setAttribute","style","display","click"],"version":3,"file":"library.6582293f.js.map"}